// Тех. задание
// Общее описание проекта: Проект представляет из себя имитацию
// регистрации/авторизации пользователя на сайте
// Логика регистрации и авторизации
// Детальное описание задачи: Пользователь должен иметь возможность
// регистрироваться на сайте(имя пользователя всегда должно быть уникальным), также
// должна быть возможность авторизоваться на сайте(все последующие операции
// возможны только если пользователь авторизован), должна быть возможность удалить
// свой профиль, для этого пользователь должен быть авторизован и при удалении
// необходимо запросить пароль для подтверждения, после подтверждения аккаунт
// нужно удалить; пользователь может изменить свой аккаунт, для этого он должен быть
// авторизован, запросить у него какие он хочет изменить ключи и значения, исключение
// составляет поле пароль, для него необходимо запросить старый пароль, после
// проверки изменить данные
// Примерный вид объекта пользователя(ваш вариант может отличаться):
// {
// name: '', //имя пользователя
// password: '', //пароль от аккаунта
// age: '', //возраст пользователя
// isLogin: false, //авторизован/неавторизован
// }
// возможные методы(ваш вариант может отличаться)
// checkUniqueUsername() //проверка на уникальность юзернейма
// checkPasswords() //сравнение правильности паролей при регистрации
// registerUser() //регистрация юзера
// checkUsersPassword() //проверка пароля от аккаунта пользователя
// loginUser() //авторизация пользователя
// updateUserAccount() //изменение аккаунта(данных) пользователя
// logoutUser() //вызод из аккаунта
// deleteUser() //удаление пользователя
// Пошаговый план действий(ваш вариант может отличаться):
// 1. Создать функцию для регистрации(запрос данных о пользователе имя, пароль,
// подтверждение, возраст)
// 2. Создать функцию для проверки имени на уникальность(функция должна
// перебирать массив со всеми пользователями и проверять, то имя, которое ввел
// пользователь, является ли уникальным, если да, то все ок, если нет, вывести
// сообщение типа: 'Пользователь с таким имененм существует')
// 3. Создать функцию для проверки паролей на совпадение(функция будет принимать
// пароль и подтверждение пароля, затем просто сверять их между собой, если пароли
// совпадают, то все ок, если нет, то вывести сообщение типа: 'Пароли не совпадают')
// 4. Создать функцию для авторизации пользователя(для этого запросить логин и
// пароль, затем проверить есть ли такой пользователь среди уже зарегистрированных,
// если есть, проверить пароль, подходит ли пароль к этому аккаунту, если все ок, то
// изменить значение ключа isLogin на true для этого пользователя)

// 5. Создать функцию для изменения аккаунта пользователя(для этого действия
// пользователь должен быть авторизован, затем запросить какие данные нужно
// изменить(запрашивать ключ), затем на что изменить(запросить значение), если
// пользователь захочет изменить пароль, необходимо сначала запросить старый пароль
// и если он совпадет, заменить на новый)
// 6. Создать функцию для выхода из аккаунта(пользователь может выйти из аккаунта,
// для этого необходимо быть авторизованным, просто вызываем данную функцию, она
// находит пользователя среди всех остальных пользоваетлей и меняет ключ isLogin на
// false)
// 7. Создать функцию для удаления аккаунта(пользователь должен быть авторизован
// и нужно ввести пароль для подтверждения, если пароль совпадает с аккаунтом,
// необходимо удалить этот объеkт пользователя из массива)
// После завершения таска отправить код в гитхаб и в классрум прикрепить ссылку на
// репозиторий
// Будет плюсом:
// Добавить минимальный интерфейс(кнопки в HTML и вывод юзернейма
// авторизованного пользователя), подключить github Pages, ссылку также прикрепить в
// гитхаб

const users = [
  {
    name: "Aizat",
    age: 21,
    password: "12345aaa",
    isLogin: "aizat_2001",
  },
  {
    name: "Rustam",
    age: 17,
    password: "12345rrr",
    isLogin: "rust_05",
  },
  {
    name: "Abbas",
    age: 20,
    password: "12345bbb",
    isLogin: "bass__",
  },
  {
    name: "Azret",
    age: 20,
    password: "12345zzz",
    isLogin: "azret_",
  },
];

let newUser = {
  age: null,
  name: null,
  password: null,
  passwordCheck: null,
  isLogin: false,
};

function registerUser() {
  const userName = prompt("Введите ваше имя!");
  const passwordNew = prompt("введите пароль");
  const passwordCheckNew = prompt("повторите  пароль");
  // console.log(userName, passwordNew, passwordCheckNew, ageNew, isLoginNew);
  const { age, name, password, isLogin, passwordCheck } = newUser;
  if (
    (age !== null,
    newUser.name !== null,
    password !== null,
    passwordCheck !== null)
  ) {
    {
      const findUser = users.filter(item => item.name === userName.name);
      if (findUser) {
        alert("Пользователь с таким именем уже существует!");
      }
    }
  }
  if (passwordNew === passwordCheckNew) {
    alert("верно");
  } else {
    passwordNew = alert("Пароли не совпадают!");
  }

  const isLoginNew = prompt("введите логин");

  const ageNew = prompt("введите ваш возраст");
}

// users.push(newUser);
registerUser();
// console.log(registerUser);

// let password = prompt("введите пароль");
// const tries = 1;
// if (password === "re456") {
//   alert(" пароль правильно");
// } else {
//   password = prompt("попробуйте заново ввести пароль");
//   console.log(password);
// }
// if (password === "re456") {
//   alert(" пароль правильно");
// } else {
//   alert("ваш акк заблокирован");
// }
